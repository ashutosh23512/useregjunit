/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package JunitTesting;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import JunitTesting.UserRegistrationException;
import java.util.function.Predicate;



interface LamdaValidation {
	boolean lambda (String a) throws UserRegistrationException;
	
}

public class UserReg {
	private final static String F_NAME="^[A-Z]{1}[a-z A-Z]{2,}$";
	private final static String L_NAME="^[A-Z]{1}[a-z A-Z]{2,}$";
	private final static String EMAIL_ID="^abc([.+_-]{0,1}[0-9a-z]+)?@[a-z0-9]+(\\.[a-z]{2,}){1,2}$";
	private final static String PH_NO="^[0-9]{2}[ ]{1}[0-9]{10}$";
	private final static String PASS="^(?=.{8,})([a-z]*)(?=.*[A-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).*$";
	public static void main(String[] args) throws UserRegistrationException{

		System.out.println("Welcome to User Registration Page using Lamda expression");

	LamdaValidation firstname = (fname) -> {
		boolean matched = false;
		Pattern pattern=Pattern.compile(F_NAME);		
		Matcher matcher=pattern.matcher(fname);
		matched= matcher.find();
		if(matched)
			System.out.println(fname + " valid ");

		if(!matched)
			throw new UserRegistrationException("Please enter valid first name");	
		return matched;
		
	};
	LamdaValidation lastname = (lname) -> {
		boolean matched = false;
		Pattern pattern=Pattern.compile(L_NAME);		
		Matcher matcher=pattern.matcher(lname);
		matched= matcher.find();
		if(matched)
			System.out.println(lname + " valid ");

		if(!matched)
			throw new UserRegistrationException("Please enter valid last name");
		return matched;
		
	};
	LamdaValidation emailid = (email) -> {
		boolean matched = false;
		Pattern pattern=Pattern.compile(EMAIL_ID);		
		Matcher matcher=pattern.matcher(email);
		matched= matcher.find();
		if(matched)
			System.out.println(email + " valid ");

		if(!matched)
			throw new UserRegistrationException("Please enter valid email");
		return matched;
	};
	
	LamdaValidation phNo = (phno) -> {
		boolean matched = false;
		Pattern pattern=Pattern.compile(PH_NO);		
		Matcher matcher=pattern.matcher(phno);
		matched= matcher.find();
		if(matched)
			System.out.println(phno + " valid ");

		if(!matched)
			throw new UserRegistrationException("Please enter valid phNo");
		return matched;
	};
	LamdaValidation password = (pass) -> {
		boolean matched = false;
		Pattern pattern=Pattern.compile(PASS);		
		Matcher matcher=pattern.matcher(pass);
		matched= matcher.find();
		if(matched)
			System.out.println(pass + " valid");
		if(!matched)
			throw new UserRegistrationException("Please enter valid password");
		return matched;
	};
	
	Predicate<String> PredicateValid  = n -> {
		Pattern pattern=Pattern.compile(PASS);		
		Matcher matcher=pattern.matcher(n);
		return matcher.find();
		
	};

	firstname.lambda("Ashutosh");
	firstname.lambda("ashutosh");
	lastname.lambda("Aggarwal");
	lastname.lambda("aggarwal");
	emailid.lambda("123@aghfj.com");
	emailid.lambda("abc@gmail.com");
	phNo.lambda("3131973131");
	phNo.lambda("91 9888823512");
	password.lambda("Tes575253");
	password.lambda("TEST@5345875");
	PredicateValid.test("TEST@3535874653");

}}